@model FooterModel

@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration

@inject IWorkContext workContext
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    var storeId = storeContext.CurrentStore.Id;
    
    var removeDesignedBy = settingService.GetSettingByKey("urbanthemesettings.removedesignedby", false, storeId, true);
    var removeCopyright = settingService.GetSettingByKey("urbanthemesettings.removecopyright", false, storeId, true);
    var instagramUrl = settingService.GetSettingByKey("urbanthemesettings.instagramurl", String.Empty, storeId, true).ToLowerInvariant();
}

<div class="footer">
    <div class="footer-upper">
        <div class="social-buttons">
            @await Component.InvokeAsync("SocialButtons")

            @await Component.InvokeAsync("Widget", new { widgetZone = "urban_footer_map" })
        </div>
    </div>
    <div class="footer-middle">
        <div class="leftside">
            @await Component.InvokeAsync("NewsletterBox")
        </div>
        <div class="rightside">
            @if (!string.IsNullOrWhiteSpace(instagramUrl))
            {
                <div class="footer-box">
                    <a class="instagram" href="@instagramUrl" target="_blank"></a>
                </div>
            }
            <div class="footer-box">
                <ul>
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                    <li><a href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("LoginRegistrationInfo") })">@T("SevenSpikes.Themes.Urban.Common.LoginRegistrationInfo")</a></li>
                </ul>
            </div>
            <div class="footer-box">
                <ul>
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                    <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                    @if (Model.BlogEnabled && Model.DisplayBlogFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                    }
                    @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="footer-lower">
        <div class="footer-disclaimer">
            @T("Content.CopyrightNotice", DateTime.Now.Year, Model.StoreName)
        </div>

        <ul class="accepted-payment-methods">
            <li class="method1"></li>
            <li class="method2"></li>
            <li class="method3"></li>
            <li class="method4"></li>
            <li class="method5"></li>
            <li class="method6"></li>
        </ul>


        <div class="footer-store-theme">
            @await Component.InvokeAsync("StoreThemeSelector")
        </div>
        <div class="footer-links-wrapper">
            @if (!removeCopyright)
            {
                <div class="footer-powered-by">
                    Powered by <a href="https://www.nopcommerce.com/">nopCommerce</a>
                    @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
                        Find more info here https://www.nopcommerce.com/nopcommerce-copyright-removal-key*@
                </div>
            }
            @if (!removeDesignedBy)
            {
                <div class="footer-designed-by">
                    Designed by <a href="https://www.nop-templates.com/" target="_blank">Nop-Templates.com</a>
                </div>
            }
            @if (Model.DisplayTaxShippingInfoFooter)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                <div class="footer-tax-shipping">
                    @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.Footer })
</div>