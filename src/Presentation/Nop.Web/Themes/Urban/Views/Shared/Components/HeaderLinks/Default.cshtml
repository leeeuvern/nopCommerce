@model HeaderLinksModel

@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService
@inject Nop.Core.IWebHelper webHelper

@{
    var isMenuMobile = settingService.GetSettingByKey("urbanthemesettings.ismenumobile", false, storeContext.CurrentStore.Id, true);
}

<div class="header-strip">
    <div class="header-top-strip">

        @if (!isMenuMobile)
        {
             @await Component.InvokeAsync("Logo")
        }

        <ul class="header-buttons">
            @if (Model.ShoppingCartEnabled)
            {
                <li class="shopping-cart-opener">
                    <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart" title="@T("ShoppingCart")">
                        <span class="cart-label">@T("ShoppingCart")</span>
                        <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    </a>
                </li>
            }
            @if (Model.WishlistEnabled)
            {
                <li class="wishlist-opener">
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist" title="@T("Wishlist")">
                        <span class="wishlist-label">@T("Wishlist")</span>
                        <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </a>
                </li>
            }
            <li class="user-links-opener" title="@T("SevenSpikes.Themes.Urban.HeaderLinks.UserLinks")"></li>
            <li class="search-opener" title="@T("Search")"></li>
            <li class="header-selectors-opener" title="@T("SevenSpikes.Themes.Urban.HeaderLinks.Selector")"></li>
            <li class="filters-button"><span>@T("SevenSpikes.Themes.Common.Filters")</span></li>
        </ul>

        <div class="header-menu">
            <div class="close-menu">
                <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
            </div>
            @{
                var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
            }
            @if (!String.IsNullOrEmpty(menuHtml.ToHtmlString()))
            {
                @menuHtml
            }
            else
            {
                @await Component.InvokeAsync("TopMenu")
            }
        </div>
    </div>
    <div class="header-bottom-strip">
        <div class="header-links-wrapper">
            @if (Model.ShoppingCartEnabled)
            {
                <div class="shopping-cart-wrapper">
                    @await Component.InvokeAsync("FlyoutShoppingCart")
                </div>
            }
            <div class="user-links-wrapper">
                <div class="header-links">
                    <ul>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
                        @if (Model.IsAuthenticated)
                        {
                            if (Model.AllowPrivateMessages)
                            {
                                <li>
                                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                                        <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                                        <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                                    </a>
                                    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
                                    {
                                        //new private message notification
                                        <script asp-location="Footer">
                                            $(document).ready(function () {
                                                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
                                            });
                                        </script>
                                    }
                                </li>
                            }
                            <li><a href="@Url.RouteUrl("CustomerInfo")" class="account">@Model.CustomerName</a></li>
                            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
                        }
                        else
                        {
							var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url) 
				                ? url.ToString()
				                : webHelper.GetRawUrl(Context.Request);

		            		<li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
		            		<li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
                        }        
			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
                    </ul>
                </div>
            </div>
            <div class="search-box-wrapper">
                <div class="search-box store-search-box">
                    @await Component.InvokeAsync("SearchBox")
                </div>
            </div>

            @{
                var taxTypeSelector = await Component.InvokeAsync("TaxTypeSelector");
                var currencySelector = await Component.InvokeAsync("CurrencySelector");
                var languageSelector = await Component.InvokeAsync("LanguageSelector");
                var headerSelectors = await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" });
            }

            @if (!String.IsNullOrEmpty(taxTypeSelector.ToHtmlString()) || !String.IsNullOrEmpty(currencySelector.ToHtmlString()) || !String.IsNullOrEmpty(languageSelector.ToHtmlString()) || !String.IsNullOrEmpty(headerSelectors.ToHtmlString()))
            {
                <div class="header-selectors-wrapper">
                    <div>
                        @taxTypeSelector
                        @currencySelector
                        @languageSelector
                    
                        @headerSelectors
                    </div>
                </div> 
            }
        </div>
    </div>
</div>